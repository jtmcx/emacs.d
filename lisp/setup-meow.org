#+TITLE: Meow Configuration
#+PROPERTY: header-args :tangle setup-meow.el
# Setting `org-src-preserve-indentation' is recommended.

#+BEGIN_SRC elisp
(use-package meow
  :ensure t
  :demand t
  :config (setup-meow))
#+END_SRC

#+BEGIN_SRC elisp
(defun setup-meow ()
  "Configure meow and enable it globally."    
#+END_SRC

Everything will be inside the ~setup-meow~ function going forward.

* General Configuration

Show meow's state in the mode line:

#+BEGIN_SRC elisp
  (meow-setup-indicator)
#+END_SRC

Show expand hints for 2.5 seconds:

#+BEGIN_SRC elisp
  (setq meow-expand-hint-remove-delay 2.5)
#+END_SRC

* Motion

#+BEGIN_SRC elisp
  (meow-normal-define-key
   ;; Inserts
   '("a" . meow-append)
   '("i" . meow-insert)
   '("o" . meow-open-below)
   '("O" . meow-open-above)

   ;; Selects
   '("b" . meow-back-word)
   '("w" . meow-next-word)
   '("W" . meow-mark-word)
   '("f" . meow-find)
   '("t" . meow-till)
   '("x" . meow-line)
   '("z" . meow-pop-selection)

   ;; Edits
   '("c" . meow-change)
   '("d" . meow-kill)
   '("p" . meow-yank)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("y" . meow-save)

   ;; Hints
   '("0" . meow-expand-0)
   '("1" . meow-expand-1)
   '("2" . meow-expand-2)
   '("3" . meow-expand-3)
   '("4" . meow-expand-4)
   '("5" . meow-expand-5)
   '("6" . meow-expand-6)
   '("7" . meow-expand-7)
   '("8" . meow-expand-8)
   '("9" . meow-expand-9)
   
   ;; Misc
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("=" . repeat)
   '("!" . shell-command-on-region)
   '("G" . meow-grab)
   '("X" . meow-goto-line)
   '("<escape>" . meow-cancel-selection))
#+END_SRC

Using shift with the arrow keys will extend the current selection:

#+BEGIN_SRC elisp
  (meow-normal-define-key
   '("S-<left>"  . meow-left-expand)
   '("S-<down>"  . meow-next-expand)
   '("S-<up>"    . meow-prev-expand)
   '("S-<right>" . meow-right-expand))
#+END_SRC

* Leader Key

#+BEGIN_SRC elisp
  (meow-leader-define-key
   '("!" . eshell)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
#+END_SRC

* Searching and Replacing Text

The ~/~ key will start a search, and the ~%~ key will start a
search-and-replace. I use [[https://github.com/emacsorphanage/anzu][anzu]] to preview the replacement in real
time.

#+BEGIN_SRC elisp
  (meow-normal-define-key
   '("/" . isearch-forward-regexp)
   '("%" . anzu-isearch-query-replace-regexp))
#+END_SRC

I use ~n~ and ~N~ to search forward and backward with ~meow-search~. I
use a custom wrapper around ~meow-search~, because I don't like how
~meow-search~ works by default.

By default, ~meow-search~ will search the buffer for the next
occurence of the selected text. It will search either backward or
forward depending on whether or not the point is before or after the
mark. I don't like that the search direction depends on the cursor
position; I'd rather have key bindings that /always/ search forward
and /always/ search backward, similar to how ~C-s~ and ~C-r~ operate
in isearch, and how ~n~ and ~N~ operate in Vim.

The ~my/meow-search-backward~ and ~my/meow-search-forward~ functions
achieve this by moving the cursor to the beginning or end of a
selection before searching. Binding these functions to ~n~ and ~N~
emulates Vim search navigation pretty well.

#+BEGIN_SRC elisp
  (defun my/meow-search-forward ()
    (interactive)
    (if (meow--direction-backward-p)
        (meow-search -1)
      (meow-search +1)))

  (defun my/meow-search-backward ()
    (interactive)
    (if (meow--direction-forward-p)
        (meow-search -1)
      (meow-search +1)))

  (meow-normal-define-key
   '("n" . my/meow-search-forward)
   '("N" . my/meow-search-backward))
#+END_SRC

For some reason, the ~<up>~ and ~<down>~ keys no longer walk the
isearch history in the minibuffer. I add them here:

#+BEGIN_SRC elisp
  (define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat)
  (define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance)
#+END_SRC

* Things

Meow has the concept of a /thing/, which can be best thought of as
text that has boundaries. For example, a string is a /thing/ bounded by
double quotes. Similarly, text enclosed within curly braces is a
/thing/. Things can have complex boundaries; for example, a function
is a /thing/, and its boundaries are dependent on the current major
mode.

The following keybindings are used to select quickly select a /thing/:

#+BEGIN_SRC elisp
  (meow-normal-define-key
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("<" . meow-beginning-of-thing)
   '(">" . meow-end-of-thing))
#+END_SRC

Each of these functions prompts the user for the type of thing they
would like to select. I use the following keys:

#+BEGIN_SRC elisp
  (meow-thing-register 'angle
    '(pair ("<") (">")) '(pair ("<") (">")))
 
  (setq meow-char-thing-table
   '((?\( . round)
     (?\[ . square)
     (?\{ . curly)
     (?\< . angle)
     (?\" . string)
     (?b  . buffer)
     (?f  . defun)
     (?l  . line)
     (?x  . visual-line)
     (?p  . paragraph)
     (?w  . window)
     (?.  . sentence)))
#+END_SRC

By default, meow uses ~r~ for parentheses, ~s~ for square brackets,
and ~c~ for curly braces. I find this hard to remember, since I don't
use this motion very often. I much prefer to use the same character as
the thing I'm trying to select, so I use ~(~, ~[~ and ~{~ instead of
~r~, ~s~, and ~c~, respectively. The rest of the
~meow-char-thing-table~ is close to the default.

* Scrolling

By default, emacs binds ~C-v~ and ~M-v~ to ~scroll-up-command~ and
~scroll-down-command~.  I don't use these bindings, and intead ---
thanks to years of Vim --- prefer ~C-d~ and ~C-u~.

It's fairly safe to rebind ~C-d~ to ~scroll-down-command~. By default,
it's bound to ~delete-char~, which is not very useful when using
meow. ~C-u~, on the other hand, is bound to ~universal-argument~,
which /is/ useful. I chose to rebind ~universal-argument~ to
~C-v~. Ultimately, this is a slightly awkward decision, but it's one I
live with.

Running ~M-x universal-argument~ will unfortunately print "C-u" in the
minibuffer, even if it's remapped to ~C-v~. The "C-u" text is
hardcoded all over the place. Oh well.

#+BEGIN_SRC elisp
  ;; Rebind universal-argument from C-u to C-v
  (global-set-key (kbd "C-v") 'universal-argument)
  (define-key universal-argument-map (kbd "C-u") nil)
  (define-key universal-argument-map (kbd "C-v") 'universal-argument-more)

  (global-set-key (kbd "C-d") 'scroll-up-command)
  (global-set-key (kbd "C-u") 'scroll-down-command)
#+END_SRC

These keybindings are configured globally. They don't /really/ have
anything to do with meow, but it seems appropriate to put them here
since they are tied to motion and navigation.

* Conclusion

Finally, we enable meow globally. This is the end of the ~setup-meow~ function.

#+BEGIN_SRC elisp
  (meow-global-mode 1))
#+END_SRC

